variable "project_prefix" {
  type        = string
  description = "prefix string put in front of string"
  default     = "f5xc"
}

variable "project_suffix" {
  type        = string
  description = "prefix string put at the end of string"
  default     = "25"
}

variable "f5xc_api_p12_file" {
  type = string
}

variable "f5xc_api_url" {
  type = string
}

variable "f5xc_api_token" {
  type = string
}

variable "f5xc_tenant" {
  type = string
}

variable "f5xc_namespace" {
  type    = string
  default = "system"
}

variable "f5xc_aws_cred" {
  type    = string
  default = "ck-aws-01"
}

variable "f5xc_aws_region" {
  type    = string
  default = "us-west-2"
}

variable "f5xc_aws_availability_zone" {
  type    = string
  default = "a"
}

variable "owner_tag" {
  type    = string
  default = "c.klewar@f5.com"
}

variable "f5xc_aws_vpc_owner" {
  type = string
  default = "c.klewar@ves.io"
}

variable "ssh_public_key_file" {
  type = string
}

variable "create_timeout" {
  type    = string
  default = "3600s"
}

locals {
  node0_single_nic_local_subnet   = format("%s-snet-node0-snic-inside-%s", var.project_prefix, var.project_suffix)
  node1_single_nic_local_subnet   = format("%s-snet-node1-snic-outside-%s", var.project_prefix, var.project_suffix)
  node2_single_nic_local_subnet   = format("%s-snet-node2-snic-workload-%s", var.project_prefix, var.project_suffix)
  node0_multi_nic_inside_subnet   = format("%s-snet-node0-mnic-inside-%s", var.project_prefix, var.project_suffix)
  node0_multi_nic_outside_subnet  = format("%s-snet-node0-mnic-outside-%s", var.project_prefix, var.project_suffix)
  node0_multi_nic_workload_subnet = format("%s-snet-node0-mnic-workload-%s", var.project_prefix, var.project_suffix)
  node1_multi_nic_inside_subnet   = format("%s-snet-node1-mnic-inside-%s", var.project_prefix, var.project_suffix)
  node1_multi_nic_outside_subnet  = format("%s-snet-node1-mnic-outside-%s", var.project_prefix, var.project_suffix)
  node1_multi_nic_workload_subnet = format("%s-snet-node1-mnic-workload-%s", var.project_prefix, var.project_suffix)
  node2_multi_nic_inside_subnet   = format("%s-snet-node2-mnic-inside-%s", var.project_prefix, var.project_suffix)
  node2_multi_nic_outside_subnet  = format("%s-snet-node2-mnic-outside-%s", var.project_prefix, var.project_suffix)
  node2_multi_nic_workload_subnet = format("%s-snet-node2-mnic-workload-%s", var.project_prefix, var.project_suffix)

  aws_availability_zone = format("%s%s", var.f5xc_aws_region, var.f5xc_aws_availability_zone)

  custom_tags = {
    Owner        = var.owner_tag
    f5xc-tenant  = var.f5xc_tenant
    f5xc-feature = "f5xc-aws-vpc-multinode-site"
  }
}

provider "volterra" {
  api_p12_file = var.f5xc_api_p12_file
  url          = var.f5xc_api_url
  alias        = "default"
}

provider "aws" {
  region = var.f5xc_aws_region
  alias  = "default"
}

module "vpc__multi_node_single_nic_existing_vpc_existing_subnet" {
  source             = "./modules/aws/vpc"
  aws_owner          = var.owner_tag
  aws_region         = var.f5xc_aws_region
  aws_az_name        = local.aws_availability_zone
  aws_vpc_name       = format("%s-vpc-mn-snic-exist-vpc-and-snet-%s", var.project_prefix, var.project_suffix)
  aws_vpc_cidr_block = "172.16.44.0/22"
  custom_tags        = local.custom_tags
  providers          = {
    aws = aws.default
  }
}

module "vpc__multi_node_multi_nic_existing_vpc_existing_subnet" {
  source             = "./modules/aws/vpc"
  aws_owner          = var.owner_tag
  aws_region         = var.f5xc_aws_region
  aws_az_name        = local.aws_availability_zone
  aws_vpc_name       = format("%s-vpc-mn-mnic-exist-vpc-and-snet-%s", var.project_prefix, var.project_suffix)
  aws_vpc_cidr_block = "172.16.48.0/20"
  custom_tags        = local.custom_tags
  providers          = {
    aws = aws.default
  }
}

module "subnet__multi_node_single_nic_existing_vpc_existing_subnet" {
  source          = "./modules/aws/subnet"
  aws_vpc_id      = module.vpc__multi_node_single_nic_existing_vpc_existing_subnet.aws_vpc["id"]
  aws_vpc_subnets = [
    {
      name                    = local.node0_single_nic_local_subnet
      owner                   = var.owner_tag
      map_public_ip_on_launch = false
      cidr_block              = "172.16.44.0/24"
      availability_zone       = local.aws_availability_zone
      custom_tags             = local.custom_tags
    },
    {
      name                    = local.node1_single_nic_local_subnet
      owner                   = var.owner_tag
      map_public_ip_on_launch = false
      cidr_block              = "172.16.45.0/24"
      availability_zone       = local.aws_availability_zone
      custom_tags             = local.custom_tags
    },
    {
      name                    = local.node2_single_nic_local_subnet
      owner                   = var.owner_tag
      map_public_ip_on_launch = false
      cidr_block              = "172.16.46.0/24"
      availability_zone       = local.aws_availability_zone
      custom_tags             = local.custom_tags
    }
  ]
  providers = {
    aws = aws.default
  }
}

module "subnet__multi_node_multi_nic_existing_vpc_existing_subnet" {
  source          = "./modules/aws/subnet"
  aws_vpc_id      = module.vpc__multi_node_multi_nic_existing_vpc_existing_subnet.aws_vpc["id"]
  aws_vpc_subnets = [
    {
      name                    = local.node0_multi_nic_inside_subnet
      owner                   = var.owner_tag
      map_public_ip_on_launch = false
      cidr_block              = "172.16.48.0/24"
      availability_zone       = local.aws_availability_zone
      custom_tags             = local.custom_tags
    },
    {
      name                    = local.node0_multi_nic_outside_subnet
      owner                   = var.owner_tag
      map_public_ip_on_launch = false
      cidr_block              = "172.16.49.0/24"
      availability_zone       = local.aws_availability_zone
      custom_tags             = local.custom_tags
    },
    {
      name                    = local.node0_multi_nic_workload_subnet
      owner                   = var.owner_tag
      map_public_ip_on_launch = false
      cidr_block              = "172.16.50.0/24"
      availability_zone       = local.aws_availability_zone
      custom_tags             = local.custom_tags
    },
    {
      name                    = local.node1_multi_nic_inside_subnet
      owner                   = var.owner_tag
      map_public_ip_on_launch = false
      cidr_block              = "172.16.51.0/24"
      availability_zone       = local.aws_availability_zone
      custom_tags             = local.custom_tags
    },
    {
      name                    = local.node1_multi_nic_outside_subnet
      owner                   = var.owner_tag
      map_public_ip_on_launch = false
      cidr_block              = "172.16.52.0/24"
      availability_zone       = local.aws_availability_zone
      custom_tags             = local.custom_tags
    },
    {
      name                    = local.node1_multi_nic_workload_subnet
      owner                   = var.owner_tag
      map_public_ip_on_launch = false
      cidr_block              = "172.16.53.0/24"
      availability_zone       = local.aws_availability_zone
      custom_tags             = local.custom_tags
    },
    {
      name                    = local.node2_multi_nic_inside_subnet
      owner                   = var.owner_tag
      map_public_ip_on_launch = false
      cidr_block              = "172.16.54.0/24"
      availability_zone       = local.aws_availability_zone
      custom_tags             = local.custom_tags
    },
    {
      name                    = local.node2_multi_nic_outside_subnet
      owner                   = var.owner_tag
      map_public_ip_on_launch = false
      cidr_block              = "172.16.55.0/24"
      availability_zone       = local.aws_availability_zone
      custom_tags             = local.custom_tags
    },
    {
      name                    = local.node2_multi_nic_workload_subnet
      owner                   = var.owner_tag
      map_public_ip_on_launch = false
      cidr_block              = "172.16.56.0/24"
      availability_zone       = local.aws_availability_zone
      custom_tags             = local.custom_tags
    }
  ]
  providers = {
    aws = aws.default
  }
}

module "f5xc_aws_vpc_multi_node_single_nic_new_vpc_new_subnet" {
  source                    = "./modules/f5xc/site/aws/vpc"
  f5xc_api_url              = var.f5xc_api_url
  f5xc_api_token            = var.f5xc_api_token
  f5xc_namespace            = var.f5xc_namespace
  f5xc_tenant               = var.f5xc_tenant
  f5xc_aws_region           = var.f5xc_aws_region
  f5xc_aws_cred             = var.f5xc_aws_cred
  f5xc_aws_vpc_owner        = var.f5xc_aws_vpc_owner
  f5xc_aws_vpc_site_name    = format("%s-vpc-mn-snic-nvpc-nsnet-%s", var.project_prefix, var.project_suffix)
  f5xc_aws_vpc_primary_ipv4 = "192.168.168.0/21"
  f5xc_aws_ce_gw_type       = "single_nic"
  f5xc_aws_vpc_az_nodes     = {
    node0 = { f5xc_aws_vpc_local_subnet = "192.168.168.0/24", f5xc_aws_vpc_az_name = local.aws_availability_zone },
    node1 = { f5xc_aws_vpc_local_subnet = "192.168.169.0/24", f5xc_aws_vpc_az_name = local.aws_availability_zone },
    node2 = { f5xc_aws_vpc_local_subnet = "192.168.170.0/24", f5xc_aws_vpc_az_name = local.aws_availability_zone }
  }
  f5xc_aws_default_ce_os_version       = true
  f5xc_aws_default_ce_sw_version       = true
  f5xc_aws_vpc_no_worker_nodes         = true
  f5xc_aws_vpc_use_http_https_port     = true
  f5xc_aws_vpc_use_http_https_port_sli = true
  f5xc_labels                          = { "aws-env" = "shared" }
  ssh_public_key                       = file(var.ssh_public_key_file)
  custom_tags                          = local.custom_tags
  providers                            = {
    aws      = aws.default
    volterra = volterra.default
  }
}

output "f5xc_aws_vpc_multi_node_single_nic_new_vpc_new_subnet" {
  value = module.f5xc_aws_vpc_multi_node_single_nic_new_vpc_new_subnet.f5xc_aws_vpc
}

module "f5xc_aws_vpc_multi_node_single_nic_new_vpc_new_subnet_apply_timeout_workaround" {
  source         = "./modules/utils/timeout"
  depend_on      = module.f5xc_aws_vpc_multi_node_single_nic_new_vpc_new_subnet.f5xc_aws_vpc
  create_timeout = var.create_timeout
}

module "f5xc_aws_vpc_multi_node_multi_nic_new_vpc_new_subnet" {
  source                    = "./modules/f5xc/site/aws/vpc"
  f5xc_api_url              = var.f5xc_api_url
  f5xc_api_token            = var.f5xc_api_token
  f5xc_namespace            = var.f5xc_namespace
  f5xc_tenant               = var.f5xc_tenant
  f5xc_aws_region           = var.f5xc_aws_region
  f5xc_aws_cred             = var.f5xc_aws_cred
  f5xc_aws_vpc_owner        = var.f5xc_aws_vpc_owner
  f5xc_aws_vpc_site_name    = format("%s-vpc-mn-mnic-nvpc-nsnet-%s", var.project_prefix, var.project_suffix)
  f5xc_aws_vpc_primary_ipv4 = "192.168.168.0/21"
  f5xc_aws_ce_gw_type       = "multi_nic"
  f5xc_aws_vpc_az_nodes     = {
    node0 = {
      f5xc_aws_vpc_workload_subnet = "192.168.168.0/26", f5xc_aws_vpc_inside_subnet = "192.168.168.64/26",
      f5xc_aws_vpc_outside_subnet  = "192.168.168.128/26", f5xc_aws_vpc_az_name = local.aws_availability_zone
    },
    node1 = {
      f5xc_aws_vpc_workload_subnet = "192.168.169.0/26", f5xc_aws_vpc_inside_subnet = "192.168.169.64/26",
      f5xc_aws_vpc_outside_subnet  = "192.168.169.128/26", f5xc_aws_vpc_az_name = local.aws_availability_zone
    },
    node2 = {
      f5xc_aws_vpc_workload_subnet = "192.168.170.0/26", f5xc_aws_vpc_inside_subnet = "192.168.170.64/26",
      f5xc_aws_vpc_outside_subnet  = "192.168.170.128/26", f5xc_aws_vpc_az_name = local.aws_availability_zone
    }
  }
  f5xc_aws_default_ce_os_version       = true
  f5xc_aws_default_ce_sw_version       = true
  f5xc_aws_vpc_no_worker_nodes         = true
  f5xc_aws_vpc_use_http_https_port     = true
  f5xc_aws_vpc_use_http_https_port_sli = true
  f5xc_labels                          = { "aws-env" = "shared" }
  ssh_public_key                       = file(var.ssh_public_key_file)
  custom_tags                          = local.custom_tags
  providers                            = {
    aws      = aws.default
    volterra = volterra.default
  }
}

output "f5xc_aws_vpc_multi_node_multi_nic_new_vpc_new_subnet" {
  value = module.f5xc_aws_vpc_multi_node_multi_nic_new_vpc_new_subnet.f5xc_aws_vpc
}

module "f5xc_aws_vpc_multi_node_multi_nic_new_vpc_new_subnet_apply_timeout_workaround" {
  source         = "./modules/utils/timeout"
  depend_on      = module.f5xc_aws_vpc_multi_node_multi_nic_new_vpc_new_subnet.f5xc_aws_vpc
  create_timeout = var.create_timeout
}

/*module "aws_vpc_multi_node_single_nic_existing_vpc_and_existing_subnets" {
  source                   = "./modules/f5xc/site/aws/vpc"
  depends_on               = [module.subnet__multi_node_single_nic_existing_vpc_existing_subnet.aws_subnets]
  f5xc_api_url             = var.f5xc_api_url
  f5xc_api_token           = var.f5xc_api_token
  f5xc_namespace           = var.f5xc_namespace
  f5xc_tenant              = var.f5xc_tenant
  f5xc_aws_region          = var.f5xc_aws_region
  f5xc_aws_cred            = var.f5xc_aws_cred
  f5xc_aws_vpc_owner       = var.f5xc_aws_vpc_owner
  f5xc_aws_ce_gw_type      = "single_nic"
  f5xc_aws_vpc_site_name   = format("%s-vpc-mn-snic-exists-vpc-snet-%s", var.project_prefix, var.project_suffix)
  f5xc_aws_vpc_existing_id = module.vpc__multi_node_single_nic_existing_vpc_existing_subnet.aws_vpc["id"]
  f5xc_aws_vpc_az_nodes    = {
    node0 = {
      f5xc_aws_vpc_local_existing_subnet_id = module.subnet__multi_node_single_nic_existing_vpc_existing_subnet.aws_subnets[local.node0_single_nic_local_subnet]["id"],
      f5xc_aws_vpc_az_name = local.aws_availability_zone
    },
    node1 = {
      f5xc_aws_vpc_local_existing_subnet_id = module.subnet__multi_node_single_nic_existing_vpc_existing_subnet.aws_subnets[local.node1_single_nic_local_subnet]["id"],
      f5xc_aws_vpc_az_name = local.aws_availability_zone
    },
    node2 = {
      f5xc_aws_vpc_local_existing_subnet_id = module.subnet__multi_node_single_nic_existing_vpc_existing_subnet.aws_subnets[local.node2_single_nic_local_subnet]["id"],
      f5xc_aws_vpc_az_name = local.aws_availability_zone
    }
  }
  f5xc_aws_default_ce_os_version       = true
  f5xc_aws_default_ce_sw_version       = true
  f5xc_aws_vpc_no_worker_nodes         = true
  f5xc_aws_vpc_use_http_https_port     = true
  f5xc_aws_vpc_use_http_https_port_sli = true
  ssh_public_key                       = file(var.ssh_public_key_file)
  custom_tags                          = local.custom_tags
  providers                            = {
    aws      = aws.default
    volterra = volterra.default
  }
}

output "aws_vpc_multi_node_single_nic_existing_vpc_and_existing_subnets" {
  value = module.aws_vpc_multi_node_single_nic_existing_vpc_and_existing_subnets.f5xc_aws_vpc
}

module "aws_vpc_multi_node_single_nic_existing_vpc_and_existing_subnets_apply_timeout_workaround" {
  source         = "./modules/utils/timeout"
  depend_on      = module.aws_vpc_multi_node_single_nic_existing_vpc_and_existing_subnets.f5xc_aws_vpc
  create_timeout = var.create_timeout
}*/